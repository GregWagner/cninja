name: Build

on: [push]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows",
            artifact: "build/cninja-1.0.0-Windows.zip",
            os: windows-latest,
            build_type: "Release",
            cxx: "../llvm-mingw/bin/clang++.exe",
            cxxflags: ""
          }
        - {
            name: "Ubuntu",
            artifact: "build/cninja-1.0.0-Linux.zip",
            os: ubuntu-latest,
            build_type: "Release",
            cxx: "clang++-9",
            cxxflags: "-stdlib=libc++"
          }
        - {
            name: "macOS",
            artifact: "build/cninja-1.0.0-Darwin.zip",
            os: macos-latest,
            build_type: "Release",
            cxx: "clang++",
            cxxflags: ""
          }
    steps:
    - uses: actions/checkout@v2
    - name: deps
      run:  |
        git submodule update --init --recursive
        
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update
          sudo apt install clang-9 libc++-9-dev libc++abi-9-dev lld-9 ninja-build
        elif [ "$RUNNER_OS" == "Windows" ]; then
          cmake -P 'cmake/download-llvm.cmake'
          cmake -E tar x llvm.zip
          echo "::add-path::$PWD/llvm-mingw/bin"
          choco install ninja
        else
          brew install ninja
        fi
      shell: bash

    - name: configure
      env:
        CXXFLAGS: ${{ matrix.config.cxxflags }}
        CXX: ${{ matrix.config.cxx }}
      run: |
        env
        mkdir build && cd build && cmake ..

    - name: make
      run: cd build && cmake --build .

    # - name: test
    #   env:
    #     CTEST_PARALLEL_LEVEL: 8
    #   run: cd build && ctest -V

    - name: deploy
      run: cd build && cmake --build . --target package
